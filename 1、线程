主要知识点：ThreadLocal、InheritableThreadLocal(获取父线程设置的线程本地变量)、以及如何在线程池中获取提交线程设置的值

1、为了方便我们能够操作和某个线程相关的数据时，java在线程类中使用了一个map变量 保存这些数据，map的key是ThreadLocal.当线程销毁或者被GC的时候数据就不存
   在了。操作这个Map都是通过 threadlocal进行操作的
   
     /* ThreadLocal values pertaining to this thread. This map is maintained
     * by the ThreadLocal class. */
    ThreadLocal.ThreadLocalMap threadLocals = null;
    
    entry是弱引用的
     static class Entry extends WeakReference<ThreadLocal> {
            /** The value associated with this ThreadLocal. */
            Object value;

            Entry(ThreadLocal k, Object v) {
                super(k);
                value = v;
            }
        }

2、为了解决子线程不能获取到父线程设置的值的问题，出现了InheritableThreadLocal，
   原理：1、在Thread类中设置来了一个新的Map变量 2、创建Thread的时候，从父线程inheritableThreadLocals copy到子线程inheritableThreadLocals中，
    并且copy的时候使用的是浅度复制，key 和value 都是使用以前的对象地址
    
        /* ThreadLocal values pertaining to this thread. This map is maintained
     * by the ThreadLocal class. */
    ThreadLocal.ThreadLocalMap threadLocals = null;

    /*
     * InheritableThreadLocal values pertaining to this thread. This map is
     * maintained by the InheritableThreadLocal class.
     */
    ThreadLocal.ThreadLocalMap inheritableThreadLocals = null;
    
     if (parent.inheritableThreadLocals != null)
            this.inheritableThreadLocals =
                ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);
  
  总结：
  1、在创建InheritableThreadLocal对象的时候赋值给线程的t.inheritableThreadLocals变量
  
  2、在创建新线程的时候会check父线程中t.inheritableThreadLocals变量是否为null，
     如果不为null则copy一份ThradLocalMap到子线程的t.inheritableThreadLocals成员变量中去
  3、因为复写了getMap(Thread)和CreateMap()方法,所以get值得时候，就可以在getMap(t)的时候就会从t.inheritableThreadLocals中拿到map对象，
       从而实现了可以拿到父线程ThreadLocal中的值
       
    new Thread(new Runnable() {
            @Override
            public void run() {
                /**
                 * 虽然copy了父类的值，但是key也是copy的父类的key对象,因此在子类中创建ThreadLocal是获取不到父类中的值
                 */
//                InheritableThreadLocal<Person> childLocal=new InheritableThreadLocal();
                System.out.println("child.get()=="+parentLocal.get().name);

            }
        }).start();
        
        
3、现在我们基本都是使用的线程池来执行任务，那么先线程池中怎么获取到父线程的值呢？
   因此阿里巴巴 除了一个框架 github:alibaba/transmittable-thread-local，能解决这个问题
   
    ExecutorService executorService = Executors.newFixedThreadPool(1);
        // 额外的处理，生成修饰了的对象executorService
        executorService = TtlExecutors.getTtlExecutorService(executorService);
        final TransmittableThreadLocal<String> parent = new TransmittableThreadLocal<String>();
        parent.set("value-set-in-parent");
        Callable call = new Callable() {
            @Override
            public Object call() throws Exception {
                // Task或是Call中可以读取，值是"value-set-in-parent"
                String value = parent.get();
                System.out.println(value);
                return "ok";
            }
        };
        executorService.submit(call);
        
        实现原理：
        1、包装executer 对象；
        2、在使用线程池 执行 在submit或者execute的时候  对runable、或者call对象进行包装，保存下当前时刻的Map对象，然后在执行任务之前的时候
        在set到当前Thread中，执行结束之后 在realease(remove) 对象
        
        1、
           public <T> Future<T> submit(Runnable task, T result) {
                 return this.executorService.submit(TtlRunnable.get(task), result);
           } 
           
           2、
           public final class TtlRunnable implements Runnable {
             private final AtomicReference<Map<TransmittableThreadLocal<?>, Object>> copiedRef = new AtomicReference(TransmittableThreadLocal.copy());
               private final Runnable runnable;
            private final boolean releaseTtlValueReferenceAfterRun;

         private TtlRunnable(Runnable runnable, boolean releaseTtlValueReferenceAfterRun) {
            this.runnable = runnable;
            this.releaseTtlValueReferenceAfterRun = releaseTtlValueReferenceAfterRun;
        }
        
        3、
            public void run() {
        Map copied = (Map)this.copiedRef.get();
        if(copied != null && (!this.releaseTtlValueReferenceAfterRun || this.copiedRef.compareAndSet(copied, (Object)null))) {
            Map backup = TransmittableThreadLocal.backupAndSetToCopied(copied);

            try {
                this.runnable.run();
            } finally {
                TransmittableThreadLocal.restoreBackup(backup);
            }

        } else {
            throw new IllegalStateException("TTL value reference is released after run!");
        }
    }
    

    

